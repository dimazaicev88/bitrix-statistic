package main

import (
	"bitrix-statistic/internal/config"
	"bitrix-statistic/internal/storage"
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/joho/godotenv"
	"github.com/sirupsen/logrus"
	"time"
)

type ems struct {
	Id int
}

type AutoGenerated []struct {
	UUID                string `json:"uuid"`
	StartTime           string `json:"start_time"`
	Branch              string `json:"branch"`
	Project             string `json:"project"`
	TestName            string `json:"test_name"`
	TypeRequest         string `json:"type_request"`
	PageURL             string `json:"page_url"`
	RequestCount        string `json:"request_count"`
	FailureCount        string `json:"failure_count"`
	MedianResponseTime  string `json:"median_response_time"`
	AverageResponseTime string `json:"average_response_time"`
	MinResponseTime     string `json:"min_response_time"`
	MaxResponseTime     string `json:"max_response_time"`
	AverageContentSize  string `json:"average_content_size"`
	Rps                 string `json:"rps"`
	FailuresBySecond    string `json:"failures_by_second"`
	Q50                 string `json:"q_50"`
	Q90                 string `json:"q_90"`
	Q100                string `json:"q_100"`
}

func main() {
	if err := godotenv.Load("E:\\projects\\bitrix-statistic\\.env"); err != nil {
		logrus.Fatal("Error loading .env file")
	}
	conn, err := storage.NewClickHouseClient(config.GetServerConfig())
	fmt.Println(conn.ServerVersion())
	ctx := context.Background()
	defer func() {
		conn.Exec(ctx, "DROP TABLE example")
	}()
	conn.Exec(context.Background(), "DROP TABLE IF EXISTS example")
	err = conn.Exec(ctx, `
		CREATE TABLE IF NOT EXISTS example (
			  Col1 UInt8
			, Col2 String
			, Col3 FixedString(3)
			, Col4 UUID
			, Col5 Map(String, UInt8)
			, Col6 Array(String)
			, Col7 Tuple(String, UInt8, Array(Map(String, String)))
			, Col8 DateTime
		) Engine = Memory
	`)
	if err != nil {
		panic(err)
	}

	batch, err := conn.PrepareBatch(ctx, "INSERT INTO example")
	if err != nil {
		panic(err)
	}
	for i := 0; i < 1000; i++ {
		err := batch.Append(
			uint8(42),
			"ClickHouse",
			"Inc",
			uuid.New(),
			map[string]uint8{"key": 1},             // Map(String, UInt8)
			[]string{"Q", "W", "E", "R", "T", "Y"}, // Array(String)
			[]any{ // Tuple(String, UInt8, Array(Map(String, String)))
				"String Value", uint8(5), []map[string]string{
					{"key": "value"},
					{"key": "value"},
					{"key": "value"},
				},
			},
			time.Now(),
		)
		if err != nil {
			panic(err)
		}
	}

	if err = batch.Send(); err != nil {
		panic(err)
	}
}
